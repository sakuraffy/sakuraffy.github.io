<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法之选择类排序</title>
      <link href="/2016/12/17/algorithm_greedy/"/>
      <url>/2016/12/17/algorithm_greedy/</url>
      
        <content type="html"><![CDATA[<p>排序算法是数据结构中一个重要组成部分，也是各种高效搜索的前提。总的来说，排序可以分为内部排序和外部排序，所谓外部排序就是待排序数据量大到内存无法一次性将其载入，需要分块载入进行排序，从而实现整体的有序性。这里只讨论内部排序，而内部排序又可以分为比较类排序和非比较类排序两大类。各种常见排序算法时空复杂度和稳定性比较如下。</p><h1 id="比较类排序"><a href="#比较类排序" class="headerlink" title="比较类排序"></a>比较类排序</h1><h2 id="基于选择的排序"><a href="#基于选择的排序" class="headerlink" title="基于选择的排序"></a>基于选择的排序</h2><p>1</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>1</p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><p>1</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>1</p><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h4><h2 id="基于交换的排序"><a href="#基于交换的排序" class="headerlink" title="基于交换的排序"></a>基于交换的排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-2"><a href="#tips-2" class="headerlink" title="tips"></a>tips</h4><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="算法描述-3"><a href="#算法描述-3" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-3"><a href="#tips-3" class="headerlink" title="tips"></a>tips</h4><h2 id="基于插入的排序"><a href="#基于插入的排序" class="headerlink" title="基于插入的排序"></a>基于插入的排序</h2><h3 id="简单插入排序"><a href="#简单插入排序" class="headerlink" title="简单插入排序"></a>简单插入排序</h3><h4 id="算法描述-4"><a href="#算法描述-4" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-4"><a href="#tips-4" class="headerlink" title="tips"></a>tips</h4><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="算法描述-5"><a href="#算法描述-5" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-5"><a href="#tips-5" class="headerlink" title="tips"></a>tips</h4><h2 id="基于归并的排序"><a href="#基于归并的排序" class="headerlink" title="基于归并的排序"></a>基于归并的排序</h2><h3 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h3><h4 id="算法描述-6"><a href="#算法描述-6" class="headerlink" title="算法描述"></a>算法描述</h4><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="tips-6"><a href="#tips-6" class="headerlink" title="tips"></a>tips</h4><h1 id="非比较类排序"><a href="#非比较类排序" class="headerlink" title="非比较类排序"></a>非比较类排序</h1><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="算法描述-7"><a href="#算法描述-7" class="headerlink" title="算法描述"></a>算法描述</h3><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="tips-7"><a href="#tips-7" class="headerlink" title="tips"></a>tips</h3><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="算法描述-8"><a href="#算法描述-8" class="headerlink" title="算法描述"></a>算法描述</h3><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="tips-8"><a href="#tips-8" class="headerlink" title="tips"></a>tips</h3><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h3 id="算法描述-9"><a href="#算法描述-9" class="headerlink" title="算法描述"></a>算法描述</h3><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="tips-9"><a href="#tips-9" class="headerlink" title="tips"></a>tips</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
